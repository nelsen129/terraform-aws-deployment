name: 'deploy-development'

on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  build-packer:
    name: 'build-packer'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: packer

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Get ami name
        run: echo "AMI_NAME=$(cat versions.pkrvars.hcl | awk -F'\"' '{print $2}')" >> $GITHUB_ENV

      - name: Check if ami already exists
        id: check_ami
        run: |
          if $(aws ec2 describe-images --filters "Name=name,Values=${{ env.AMI_NAME }}" | grep -q "Name")
          then
            echo "AMI_EXISTS=true" >> $GITHUB_ENV
          else
            echo "AMI_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Packer Format
        if: ${{ env.AMI_EXISTS == false }}
        run: packer fmt -check .

      - name: Packer Init
        if: ${{ env.AMI_EXISTS == false }}
        run: packer init .

      - name: Packer Validate
        if: ${{ env.AMI_EXISTS == false }}
        run: packer validate --var-file=versions.pkrvars.hcl .

      - name: Packer Build
        if: ${{ env.AMI_EXISTS == false }}
        run: packer build --var-file=versions.pkrvars.hcl .

  development-deploy:
    name: 'deploy-development'
    runs-on: ubuntu-latest
    environment: development
    needs: build-packer

    defaults:
      run:
        shell: bash
        working-directory: terraform/dev

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Setup Terraform variables
        run: |-
          cat <<EOT >> terraform.tfvars

          role_arn = "${{ secrets.AWS_GITHUB_ACTIONS_ROLE }}"
          EOT

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
